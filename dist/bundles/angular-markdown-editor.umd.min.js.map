{
  "version": 3,
  "file": "angular-markdown-editor.umd.min.js",
  "sources": [
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/markdown-editor-config.ts",
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/global-editor-options.ts",
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/angular-markdown-editor.component.ts",
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/angular-markdown-editor.module.ts"
  ],
  "sourcesContent": [
    "import { GlobalEditorOptions } from './global-editor-options';\n\nexport class MarkdownEditorConfig {\n  options: any;\n\n  constructor() {\n    this.options = GlobalEditorOptions;\n  }\n}\n",
    "import { EditorOption } from './models/editorOption.interface';\n\nexport const GlobalEditorOptions: EditorOption = {\n  autofocus: false,\n  disabledButtons: [],\n  dropZoneOptions: null,\n  enableDropDataUri: false,\n  footer: '',\n  height: 'inherit',\n  hiddenButtons: ['cmdImage', 'cmdPreview', 'cmdTable', 'cmdQuote', 'cmdCode', 'cmdUrl'],\n  hideable: false,\n  iconlibrary: 'glyph',\n  initialstate: 'editor',\n  language: 'fr',\n  additionalButtons: [\n    [{\n    name: 'groupFont',\n    data: [{\n      name: 'cmdStrikethrough',\n      toggle: false,\n      title: 'Strikethrough',\n      icon: {\n        fa: 'fa fa-strikethrough',\n        glyph: 'glyphicon glyphicon-minus'\n      },\n      callback: (e) => {\n        // Give/remove ~~ surround the selection\n        let chunk;\n        let cursor;\n        const selected = e.getSelection();\n        const content = e.getContent();\n\n        if (selected.length === 0) {\n          // Give extra word\n          chunk = e.__localize('strikethrough');\n        } else {\n          chunk = selected.text;\n        }\n\n        // transform selection and set the cursor into chunked text\n        if (content.substr(selected.start - 2, 2) === '~~' &&\n          content.substr(selected.end, 2) === '~~') {\n          e.setSelection(selected.start - 2, selected.end + 2);\n          e.replaceSelection(chunk);\n          cursor = selected.start - 2;\n        } else {\n          e.replaceSelection('~~' + chunk + '~~');\n          cursor = selected.start + 2;\n        }\n\n        // Set the cursor\n        e.setSelection(cursor, cursor + chunk.length);\n      }\n    }]\n    },\n    {\n      name: 'groupMisc',\n      data: [{\n        name: 'cmdTable',\n        toggle: false,\n        title: 'Table',\n        icon: {\n          fa: 'fa fa-table',\n          glyph: 'glyphicon glyphicon-th'\n        },\n        callback: (e) => {\n          // Replace selection with some drinks\n          let chunk;\n          let cursor;\n          const selected = e.getSelection();\n\n          chunk = '\\n| Tables        | Are           | Cool  | \\n'\n            + '| ------------- |:-------------:| -----:| \\n'\n            + '| col 3 is      | right-aligned | $1600 | \\n'\n            + '| col 2 is      | centered      |   $12 | \\n'\n            + '| zebra stripes | are neat      |    $1 |';\n\n          // transform selection and set the cursor into chunked text\n          e.replaceSelection(chunk);\n          cursor = selected.start;\n\n          // Set the cursor\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }]\n    }]\n  ]\n};\n",
    "import { AfterViewInit, Component, ElementRef, forwardRef, Inject, Injectable, Input, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorLocale, EditorOption, Dictionary } from './models';\nimport { GlobalEditorOptions } from './global-editor-options';\n\ndeclare var $: any;\n\nexport const MARKDOWN_EDITOR_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => AngularMarkdownEditorComponent),\n  multi: true\n};\n\n@Injectable()\n@Component({\n  moduleId: 'angulaMarkdownEditor',\n  selector: 'angular-markdown-editor',\n  template: '<textarea #markdownEditorElm id=\"{{textareaId}}\" name=\"{{textareaId}}\" data-provide=\"markdown\" rows=\"{{rows}}\"></textarea>',\n  providers: [MARKDOWN_EDITOR_VALUE_ACCESSOR]\n})\nexport class AngularMarkdownEditorComponent implements AfterViewInit {\n  @ViewChild('markdownEditorElm') elm: ElementRef;\n\n  /** Locale set that has a language and dictionary that can be added as an alternative language. Can be 1 or more dictionaries */\n  @Input()\n  set locale(locale: EditorLocale | EditorLocale[]) {\n    this.addLocaleSet(locale);\n  }\n\n  /** Id of the textarea DOM element used by the lib */\n  @Input() textareaId: string;\n\n  /** Markdown Editor Options to pass to the element */\n  @Input() options?: EditorOption;\n\n  /** Number of rows for the textarea */\n  @Input() rows = 10;\n\n  public value: any | any[];\n  public onModelChange: Function = () => {};\n  public onModelTouched: Function = () => {};\n\n  constructor(@Inject('config') private forRootConfig: EditorOption) {}\n\n  ngAfterViewInit() {\n    this.initialization();\n  }\n\n  addLocaleSet(editorLocale: EditorLocale | EditorLocale[]) {\n    if (!editorLocale) {\n      return;\n    }\n    if (Array.isArray(editorLocale)) {\n      editorLocale.forEach((locale: EditorLocale) => $.fn.markdown.messages[locale.language] = locale.dictionary);\n    } else {\n      $.fn.markdown.messages[editorLocale.language] = editorLocale.dictionary;\n    }\n  }\n\n  initialization() {\n    // get all default options to get the entire list of onEvent so that we can attach Dispatch Custom Event to them\n    // we also merge these with the options, and pass these merged options to the hookToEditorEvents() method to cover all onEvent callbacks\n    const markdownDefaultOptions = $.fn.markdown.defaults;\n\n    // re-hook new events that were optionally defined in the options\n    // merge the options, the order matters (last options on the right have higher priorities)\n    const options = { ...markdownDefaultOptions, ...GlobalEditorOptions, ...this.forRootConfig, ...this.options };\n\n    // hook all events to respective callbacks\n    // 1- could be coming from a Dispatched Event in the View:: (onX)=\"do()\"\n    // 2- or from editor option callback in the Component:: const options = { onX: () => do() }\n    this.hookToEditorEvents(options);\n\n    // hook to the onChange event to update our model\n    // however we don't want to override the previous callback, so we will run that one to if exists\n    const previousOnChange = options.onChange;\n    options.onChange = (e) => {\n      this.onModelChange(e && e.getContent && e.getContent());\n      if (typeof previousOnChange === 'function') {\n        previousOnChange(e);\n      }\n    };\n\n    // finally create the editor\n    $(`#${this.textareaId}`).markdown(options);\n  }\n\n  /**\n   * Hook any of the editor event(s) to Dispatch Custom Event so that we can use them in Angular with (onX)=\"doSomething($event.detail.eventData)\"\n   * @param editor options\n   */\n  hookToEditorEvents(options) {\n    for (const prop in options) {\n      if (options.hasOwnProperty(prop) && prop.startsWith('on')) {\n        const previousEvent = options[prop];\n\n        // on Callback triggered\n        options[prop] = (e) => {\n          // Dispatch a Custom Event, so that the (onX)=\"do()\" from the View works\n          this.dispatchCustomEvent(prop, { eventData: e });\n\n          // if an event was passed through the options (instead of dispatch), and is not empty function, then we need to run it as well\n          // basically we don't want the Dispatch Custom Event (onX)=\"do()\" to override the ones passed directly in the editor option callbacks\n          if (typeof previousEvent === 'function') {\n            previousEvent(e);\n          }\n        };\n      }\n    }\n  }\n\n  /**\n   * Write value to the native element\n   * @param value string\n   */\n  writeValue(value: string): void {\n    this.value = value;\n\n    // preset values in the DOM element\n    if (this.value) {\n      this.elm.nativeElement.value = this.value;\n    }\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: Function): void {\n    this.onModelTouched = fn;\n  }\n\n  /** Dispatch of Custom Event, which by default will bubble & is cancelable */\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true, isCancelable: boolean = true) {\n    const eventInit: CustomEventInit = { bubbles: isBubbling, cancelable: isCancelable };\n    if (data) {\n      eventInit.detail = data;\n    }\n    return this.elm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\n  }\n}\n",
    "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AngularMarkdownEditorComponent } from './angular-markdown-editor.component';\nimport { EditorOption } from './models';\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [AngularMarkdownEditorComponent],\n  exports: [AngularMarkdownEditorComponent],\n  entryComponents: [AngularMarkdownEditorComponent]\n})\nexport class AngularMarkdownEditorModule {\n  static forRoot(config: EditorOption = {}) {\n    return {\n      ngModule: AngularMarkdownEditorModule,\n      providers: [\n        { provide: 'config', useValue: config }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "MarkdownEditorConfig",
    "this",
    "options",
    "GlobalEditorOptions",
    "autofocus",
    "disabledButtons",
    "dropZoneOptions",
    "enableDropDataUri",
    "footer",
    "height",
    "hiddenButtons",
    "hideable",
    "iconlibrary",
    "initialstate",
    "language",
    "additionalButtons",
    "name",
    "data",
    "toggle",
    "title",
    "icon",
    "fa",
    "glyph",
    "callback",
    "e",
    "chunk",
    "cursor",
    "selected",
    "getSelection",
    "content",
    "getContent",
    "length",
    "__localize",
    "text",
    "substr",
    "start",
    "end",
    "setSelection",
    "replaceSelection",
    "MARKDOWN_EDITOR_VALUE_ACCESSOR",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "AngularMarkdownEditorComponent",
    "multi",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "locale",
    "addLocaleSet",
    "ngAfterViewInit",
    "initialization",
    "editorLocale",
    "Array",
    "isArray",
    "forEach",
    "$",
    "fn",
    "markdown",
    "messages",
    "dictionary",
    "_this",
    "markdownDefaultOptions",
    "defaults",
    "assign",
    "forRootConfig",
    "hookToEditorEvents",
    "previousOnChange",
    "onChange",
    "onModelChange",
    "textareaId",
    "_loop_1",
    "prop",
    "hasOwnProperty",
    "startsWith",
    "previousEvent_1",
    "dispatchCustomEvent",
    "eventData",
    "writeValue",
    "value",
    "elm",
    "nativeElement",
    "registerOnChange",
    "registerOnTouched",
    "onModelTouched",
    "eventName",
    "isBubbling",
    "isCancelable",
    "eventInit",
    "bubbles",
    "cancelable",
    "detail",
    "dispatchEvent",
    "CustomEvent",
    "rows",
    "type",
    "Injectable",
    "Component",
    "args",
    "moduleId",
    "selector",
    "template",
    "providers",
    "undefined",
    "decorators",
    "Inject",
    "ViewChild",
    "Input",
    "AngularMarkdownEditorModule",
    "forRoot",
    "config",
    "ngModule",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents"
  ],
  "mappings": "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"
}
